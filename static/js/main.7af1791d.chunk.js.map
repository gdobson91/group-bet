{"version":3,"sources":["components/SideDrawer/DrawerToggleButton.jsx","components/Toolbar/Toolbar.jsx","components/SideDrawer/SideDrawer.jsx","components/Backdrop/Backdrop.jsx","App.js","serviceWorker.js","index.js"],"names":["drawerToggleButton","props","react_default","a","createElement","className","onClick","click","Toolbar","SideDrawer_DrawerToggleButton","drawerClickHandler","href","sideDrawer","drawerClasses","show","id","backdrop","App","state","sideDrawerOpen","drawerToggleClickHandler","_this","setState","prevState","backdropClickHandler","this","Backdrop_Backdrop","style","height","components_Toolbar_Toolbar","SideDrawer_SideDrawer","padding","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAWeA,SARY,SAAAC,GAAK,OAC9BC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBC,QAASL,EAAMM,OAC/CL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BCqBJG,SAxBC,SAAAP,GAAK,OACnBC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAACK,EAAD,CAAoBF,MAAON,EAAMS,sBAEnCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGO,KAAK,KAAR,aAEFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGO,KAAK,YAAR,QAEFT,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGO,KAAK,YAAR,cCEGC,SAnBI,SAAAX,GACjB,IAAIY,EAAgB,cAIpB,OAHIZ,EAAMa,OACRD,EAAgB,oBAGhBX,EAAAC,EAAAC,cAAA,OAAKC,UAAWQ,GACdX,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGW,GAAG,YAAN,QAEFb,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGO,KAAK,YAAR,YCVKK,SAFE,SAAAf,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,QAASL,EAAMM,UCwCpDU,6MArCbC,MAAQ,CACNC,gBAAgB,KAGlBC,yBAA2B,WACzBC,EAAKC,SAAS,SAAAC,GACZ,MAAO,CAAEJ,gBAAiBI,EAAUJ,qBAIxCK,qBAAuB,WACrBH,EAAKC,SAAS,CAAEH,gBAAgB,6EAIhC,IAAIH,EAMJ,OAJIS,KAAKP,MAAMC,iBACbH,EAAWd,EAAAC,EAAAC,cAACsB,EAAD,CAAUnB,MAAOkB,KAAKD,wBAIjCtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMsB,MAAO,CAAEC,OAAQ,SACpC1B,EAAAC,EAAAC,cAACyB,EAAD,CAASnB,mBAAoBe,KAAKL,2BAClClB,EAAAC,EAAAC,cAAC0B,EAAD,CAAYhB,KAAMW,KAAKP,MAAMC,iBAC5BH,EACDd,EAAAC,EAAAC,cAAA,OAAKuB,MAAO,CAAEC,OAAQ,UACtB1B,EAAAC,EAAAC,cAAA,QAAMuB,MAAO,CAAEI,QAAS,aACtB7B,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,iDA/BQ4B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7af1791d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./DrawerToggleButton.css\";\r\n\r\nconst drawerToggleButton = props => (\r\n  <button className=\"toggle-button\" onClick={props.click}>\r\n    <div className=\"toggle-button_line\" />\r\n    <div className=\"toggle-button_line\" />\r\n    <div className=\"toggle-button_line\" />\r\n  </button>\r\n);\r\n\r\nexport default drawerToggleButton;\r\n","import React, { Component } from \"react\";\r\nimport DrawerToggleButton from \"../SideDrawer/DrawerToggleButton\";\r\nimport \"./Toolbar.css\";\r\n\r\nconst Toolbar = props => (\r\n  <header className=\"toolbar\">\r\n    <nav className=\"toolbar_navigation\">\r\n      <div className=\"toolbar-toggle_button\">\r\n        <DrawerToggleButton click={props.drawerClickHandler} />\r\n      </div>\r\n      <div className=\"toolbar_logo\">\r\n        <a href=\"/\">THE LOGO</a>\r\n      </div>\r\n      <div className=\"spacer\" />\r\n      <div className=\"toolbar_navigation-items\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"#opening\">AFL</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#opening\">UFC</a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default Toolbar;\r\n","import React, { Component } from \"react\";\r\nimport \"./SideDrawer.css\";\r\n\r\nconst sideDrawer = props => {\r\n  let drawerClasses = \"side-drawer\";\r\n  if (props.show) {\r\n    drawerClasses = \"side-drawer open\";\r\n  }\r\n  return (\r\n    <nav className={drawerClasses}>\r\n      <ul>\r\n        <li>\r\n          <a id=\"#opening\">AFL</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"#opening\">UFC</a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default sideDrawer;\r\n","import React, { Component } from \"react\";\r\nimport \"./Backdrop.css\";\r\n\r\nconst backdrop = props => <div className=\"backdrop\" onClick={props.click} />;\r\n\r\nexport default backdrop;\r\n","import React, { Component } from \"react\";\nimport Toolbar from \"./components/Toolbar/Toolbar\";\nimport SideDrawer from \"./components/SideDrawer/SideDrawer\";\nimport Backdrop from \"./components/Backdrop/Backdrop\";\n\nclass App extends Component {\n  state = {\n    sideDrawerOpen: false\n  };\n\n  drawerToggleClickHandler = () => {\n    this.setState(prevState => {\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({ sideDrawerOpen: false });\n  };\n\n  render() {\n    let backdrop;\n\n    if (this.state.sideDrawerOpen) {\n      backdrop = <Backdrop click={this.backdropClickHandler} />;\n    }\n\n    return (\n      <div className=\"App\" style={{ height: \"100%\" }}>\n        <Toolbar drawerClickHandler={this.drawerToggleClickHandler} />\n        <SideDrawer show={this.state.sideDrawerOpen} />\n        {backdrop}\n        <div style={{ height: \"60px\" }} />\n        <main style={{ padding: \"0px 10px\" }}>\n          <p>This is the page content 1!</p>\n          <p>This is the page content 2!</p>\n          <p>This is the page content 3!</p>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}