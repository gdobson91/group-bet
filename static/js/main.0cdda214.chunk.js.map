{"version":3,"sources":["App.js","components/Backdrop/Backdrop.jsx","components/SideDrawer/DrawItem.jsx","components/SideDrawer/SideDrawer.jsx","components/SideDrawer/DrawerToggleButton.jsx","components/Toolbar/Toolbar.jsx","serviceWorker.js","index.js"],"names":["App","state","sideDrawerOpen","sports","drawerToggleClickHandler","_this","setState","prevState","backdropClickHandler","FIRST_INDEX","DEFAULT_ENCODING","DEFAULT_JSON_FORMAT","options","hostname","port","path","method","headers","X-Application","Accept","Content-type","X-Authentication","Access-Control-Allow-Origin","Access-Control-Allow-Methods","Access-Control-Allow-Headers","findHorseRaceId","console","log","requestFilters","jsonRequest","constructJsonRpcRequest","str","req","https","request","res","setEncoding","on","chunk","response","JSON","parse","handleError","getNextAvailableHorseRace","write","end","e","message","eventId","i","Object","keys","result","length","eventType","name","id","retrieveEventId","jsonDate","Date","toJSON","getListOfRunners","marketId","retrieveMarketId","operation","params","error","stringify","data","APINGException","retrieveExceptionDetails","process","exit","DemoApiNgClient","backdrop","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_components_Backdrop_Backdrop__WEBPACK_IMPORTED_MODULE_8__","click","className","style","height","_components_Toolbar_Toolbar__WEBPACK_IMPORTED_MODULE_6__","drawerClickHandler","_components_SideDrawer_SideDrawer__WEBPACK_IMPORTED_MODULE_7__","show","padding","Component","require","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","props","onClick","DrawItem","react_default","href","sport","sideDrawer","drawerClasses","map","SideDrawer_DrawItem","drawerToggleButton","Toolbar","SideDrawer_DrawerToggleButton","Boolean","window","location","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cdda214.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Toolbar from \"./components/Toolbar/Toolbar\";\nimport SideDrawer from \"./components/SideDrawer/SideDrawer\";\nimport Backdrop from \"./components/Backdrop/Backdrop\";\n\nclass App extends Component {\n  state = {\n    sideDrawerOpen: false,\n    sports: [\"AFL\", \"Golf\", \"Soccer\", \"UFC\"]\n  };\n\n  drawerToggleClickHandler = () => {\n    this.setState(prevState => {\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({ sideDrawerOpen: false });\n\n    DemoApiNgClient();\n  };\n\n  render() {\n    let backdrop;\n\n    if (this.state.sideDrawerOpen) {\n      backdrop = <Backdrop click={this.backdropClickHandler} />;\n    }\n\n    return (\n      <div className=\"App\" style={{ height: \"100%\" }}>\n        <Toolbar drawerClickHandler={this.drawerToggleClickHandler} />\n        <SideDrawer\n          sports={this.state.sports}\n          show={this.state.sideDrawerOpen}\n        />\n        {backdrop}\n        <div style={{ height: \"60px\" }} />\n        <main style={{ padding: \"0px 10px\" }}>\n          <p>This is the page content 1!</p>\n          <p>This is the page content 2!</p>\n          <p>This is the page content 3!</p>\n        </main>\n      </div>\n    );\n  }\n}\n\nvar https = require(\"https\");\n\n// Main class that contains all operations\nfunction DemoApiNgClient() {\n  // App key\n  var appkey = \"srvsmqIdO5bzDv92\";\n  // Session token\n  var ssid = \"mky5xgHYDBZkV/WUqHu4SXzP4VZ22jNazhSR7fxlVqw=\";\n  var FIRST_INDEX = 0;\n  var DEFAULT_ENCODING = \"utf-8\";\n  var DEFAULT_JSON_FORMAT = \"\\t\";\n\n  var options = {\n    hostname: \"api.betfair.com\",\n    port: 443,\n    path: \"/exchange/betting/json-rpc/v1\",\n    method: \"POST\",\n    headers: {\n      \"X-Application\": appkey,\n      Accept: \"application/json\",\n      \"Content-type\": \"application/json\",\n      \"X-Authentication\": ssid,\n      \"Access-Control-Allow-Origin\": \"https://gdobson91.github.io/group-bet/\",\n      \"Access-Control-Allow-Methods\": \"GET, POST, PATCH, PUT, DELETE, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"Origin, Content-Type, X-Auth-Token\"\n    }\n  };\n\n  start();\n\n  // Start from finding the horse race event type id\n  function start() {\n    findHorseRaceId(options);\n  }\n\n  // Construct request and POST it to API-NG\n  function findHorseRaceId(options) {\n    console.log(\"Get horse racing event id\");\n    // Define Horse Racing in filter object\n    var requestFilters = '{\"filter\":{}}';\n    var jsonRequest = constructJsonRpcRequest(\"listEventTypes\", requestFilters);\n\n    console.log(\"Get horse racing event id 1\");\n    var str = \"\";\n    var req = https.request(options, function(res) {\n      res.setEncoding(DEFAULT_ENCODING);\n      res.on(\"data\", function(chunk) {\n        str += chunk;\n      });\n\n      console.log(\"Get horse racing event id 2\");\n      res.on(\"end\", function(chunk) {\n        // On resposne parse Json and check for errors\n        var response = JSON.parse(str);\n        handleError(response);\n        // Retrieve id from response and get next available horse race\n\n        console.log(\"Get horse racing event id 3\");\n\n        getNextAvailableHorseRace(options, response);\n      });\n    });\n    // Send Json request object\n    req.write(jsonRequest, DEFAULT_ENCODING);\n    req.end();\n\n    req.on(\"error\", function(e) {\n      console.log(\"Problem with request: \" + e.message);\n    });\n  }\n\n  // Get next horse race based on current date\n  function getNextAvailableHorseRace(options, response) {\n    // Retrieve event id from previous response\n    var eventId = retrieveEventId(response);\n    var jsonDate = new Date().toJSON();\n    console.log(\n      \"Get next available horse race starting from date: \" + jsonDate\n    );\n    var str = \"\";\n    var requestFilters =\n      '{\"filter\":{\"eventTypeIds\": [' +\n      eventId +\n      '],\"marketCountries\":[\"GB\"],\"marketTypeCodes\":[\"WIN\"],\"marketStartTime\":{\"from\":\"' +\n      jsonDate +\n      '\"}},\"sort\":\"FIRST_TO_START\",\"maxResults\":\"1\",\"marketProjection\":[\"RUNNER_DESCRIPTION\"]}';\n    var jsonRequest = constructJsonRpcRequest(\n      \"listMarketCatalogue\",\n      requestFilters\n    );\n\n    var req = https.request(options, function(res) {\n      res.setEncoding(DEFAULT_ENCODING);\n      res.on(\"data\", function(chunk) {\n        str += chunk;\n      });\n\n      res.on(\"end\", function(chunk) {\n        var response = JSON.parse(str);\n        handleError(response);\n        // Get list of runners that are available in that race\n        getListOfRunners(options, response);\n      });\n    });\n    req.write(jsonRequest, DEFAULT_ENCODING);\n    req.end();\n    req.on(\"error\", function(e) {\n      console.log(\"Problem with request: \" + e.message);\n    });\n  }\n\n  function getListOfRunners(options, response) {\n    var marketId = retrieveMarketId(response);\n    console.log(\"Get list of runners for market Id: \" + marketId);\n    var requestFilters =\n      '{\"marketIds\":[\"' +\n      marketId +\n      '\"],\"priceProjection\":{\"priceData\":[\"EX_BEST_OFFERS\"],\"exBestOfferOverRides\":{\"bestPricesDepth\":2,\"rollupModel\":\"STAKE\",\"rollupLimit\":20},\"virtualise\":false,\"rolloverStakes\":false},\"orderProjection\":\"ALL\",\"matchProjection\":\"ROLLED_UP_BY_PRICE\"}';\n    var jsonRequest = constructJsonRpcRequest(\"listMarketBook\", requestFilters);\n    var str = \"\";\n    var req = https.request(options, function(res) {\n      res.setEncoding(DEFAULT_ENCODING);\n      res.on(\"data\", function(chunk) {\n        str += chunk;\n      });\n\n      res.on(\"end\", function(chunk) {\n        var response = JSON.parse(str);\n        handleError(response);\n        // Place bet on first runner\n        //placeBet(options, response, marketId);\n      });\n    });\n    req.write(jsonRequest, DEFAULT_ENCODING);\n    req.end();\n    req.on(\"error\", function(e) {\n      console.log(\"Problem with request: \" + e.message);\n      return;\n    });\n  }\n\n  function placeBet(options, response, marketId) {\n    var str = \"\";\n    var selectionId = retrieveSelectionId(response);\n    // Invalid price and size, change that to minimum price of 2.0\n    var price = \"2\";\n    var size = \"0.01\";\n    var customerRef = new Date().getMilliseconds();\n    console.log(\"Place bet on runner with selection Id: \" + selectionId);\n    var requestFilters =\n      '{\"marketId\":\"' +\n      marketId +\n      '\",\"instructions\":[{\"selectionId\":\"' +\n      selectionId +\n      '\",\"handicap\":\"0\",\"side\":\"BACK\",\"orderType\":\"LIMIT\",\"limitOrder\":{\"size\":\"' +\n      size +\n      '\",\"price\":\"' +\n      price +\n      '\",\"persistenceType\":\"LAPSE\"}}],\"customerRef\":\"' +\n      customerRef +\n      '\"}';\n    var jsonRequest = constructJsonRpcRequest(\"placeOrders\", requestFilters);\n    var req = https.request(options, function(res) {\n      res.setEncoding(DEFAULT_ENCODING);\n      res.on(\"data\", function(chunk) {\n        str += chunk;\n      });\n      res.on(\"end\", function(chunk) {\n        var response = JSON.parse(str);\n        handleError(response);\n        console.log(JSON.stringify(response, null, DEFAULT_JSON_FORMAT));\n      });\n    });\n    req.write(jsonRequest, DEFAULT_ENCODING);\n    req.end();\n    req.on(\"error\", function(e) {\n      console.log(\"Problem with request: \" + e.message);\n    });\n  }\n\n  // get event id from the response\n  function retrieveEventId(response) {\n    for (var i = 0; i <= Object.keys(response.result).length; i++) {\n      if (response.result[i].eventType.name == \"Horse Racing\") {\n        return response.result[i].eventType.id;\n      }\n    }\n  }\n\n  // get selection id from the response\n  function retrieveSelectionId(response) {\n    return response.result[FIRST_INDEX].runners[FIRST_INDEX].selectionId;\n  }\n\n  // get market id from the response\n  function retrieveMarketId(response) {\n    return response.result[FIRST_INDEX].marketId;\n  }\n\n  function constructJsonRpcRequest(operation, params) {\n    return (\n      '{\"jsonrpc\":\"2.0\",\"method\":\"SportsAPING/v1.0/' +\n      operation +\n      '\", \"params\": ' +\n      params +\n      ', \"id\": 1}'\n    );\n  }\n\n  // Handle Api-NG errors, exception details are wrapped within response object\n  function handleError(response) {\n    // check for errors in response body, we can't check for status code as jsonrpc returns always 200\n    if (response.error != null) {\n      // if error in response contains only two fields it means that there is no detailed message of exception thrown from API-NG\n      if (Object.keys(response.error).length > 2) {\n        console.log(\"Error with request!!\");\n        console.log(JSON.stringify(response, null, DEFAULT_JSON_FORMAT));\n        console.log(\"Exception Details: \");\n        console.log(\n          JSON.stringify(\n            retrieveExceptionDetails(response),\n            null,\n            DEFAULT_JSON_FORMAT\n          )\n        );\n      }\n      process.exit(1);\n    }\n  }\n\n  // Get exception message out of a response object\n  function retrieveExceptionDetails(response) {\n    return response.error.data.APINGException;\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\nimport \"./Backdrop.css\";\r\n\r\nconst backdrop = props => <div className=\"backdrop\" onClick={props.click} />;\r\n\r\nexport default backdrop;\r\n","import React, { Component } from \"react\";\r\nimport \"./SideDrawer.css\";\r\n\r\nconst DrawItem = props => (\r\n  <li className=\"nav-item\">\r\n    <a className=\"nav-link active\" href=\"\">\r\n      {props.sport}\r\n    </a>\r\n  </li>\r\n);\r\n\r\nexport default DrawItem;\r\n","import React, { Component } from \"react\";\r\nimport \"./SideDrawer.css\";\r\nimport DrawItem from \"./DrawItem\";\r\n\r\nconst sideDrawer = props => {\r\n  let drawerClasses = \"side-drawer\";\r\n  let sports = props.sports;\r\n  console.log(sports);\r\n  if (props.show) {\r\n    drawerClasses = \"side-drawer open\";\r\n  }\r\n  return (\r\n    <nav className={drawerClasses}>\r\n      <ul className=\"nav flex-column\">\r\n        {sports.map(sport => (\r\n          <DrawItem sport={sport} />\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default sideDrawer;\r\n","import React from \"react\";\r\nimport \"./DrawerToggleButton.css\";\r\n\r\nconst drawerToggleButton = props => (\r\n  <button className=\"toggle-button\" onClick={props.click}>\r\n    <div className=\"toggle-button_line\" />\r\n    <div className=\"toggle-button_line\" />\r\n    <div className=\"toggle-button_line\" />\r\n  </button>\r\n);\r\n\r\nexport default drawerToggleButton;\r\n","import React, { Component } from \"react\";\r\nimport DrawerToggleButton from \"../SideDrawer/DrawerToggleButton\";\r\nimport \"./Toolbar.css\";\r\n\r\nconst Toolbar = props => (\r\n  <header className=\"toolbar\">\r\n    <nav className=\"toolbar_navigation\">\r\n      <div className=\"toolbar-toggle_button\">\r\n        <DrawerToggleButton click={props.drawerClickHandler} />\r\n      </div>\r\n      <div className=\"toolbar_logo\">\r\n        <a href=\"\">THE LOGO</a>\r\n      </div>\r\n      <div className=\"spacer\" />\r\n      <div className=\"toolbar_navigation-items\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"\">AFL</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"\">UFC</a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default Toolbar;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}