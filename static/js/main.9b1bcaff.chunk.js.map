{"version":3,"sources":["components/SideDrawer/DrawerToggleButton.jsx","components/Toolbar/Toolbar.jsx","components/SideDrawer/DrawerItem.jsx","components/SideDrawer/SideDrawer.jsx","components/Backdrop/Backdrop.jsx","components/MainPanel/EventListItem.jsx","components/MainPanel/EventList.jsx","components/MainPanel/MarketListItem.jsx","components/MainPanel/MarketList.jsx","App.js","serviceWorker.js","index.js"],"names":["drawerToggleButton","props","react_default","a","createElement","className","onClick","click","Toolbar","SideDrawer_DrawerToggleButton","drawerClickHandler","DrawerItem","href","api_key","sport","key","i","drawItemClickHandler","title","sideDrawer","drawerClasses","sports","show","style","margin","borderRadius","map","SideDrawer_DrawerItem","backdrop","EventListItem","eventListItemClickHandler","event","id","data-label","event-id","name","Intl","DateTimeFormat","year","month","day","hour","minute","second","timeZone","format","Date","parse","openDate","EventList","events","MainPanel_EventListItem","MarketListItem","marketListItemClickHandler","market","marketName","MarketList","markets","MainPanel_MarketListItem","afl","mma","soccer","App","state","sideDrawerOpen","selectedSport","showload","showmarketpages","showeventpage","drawerToggleClickHandler","_this","setState","prevState","backdropClickHandler","eventId","getEventList","find","getMarketList","eventTypeId","axios","post","filter","eventTypeIds","marketTypeCodes","headers","X-Application","X-Authentication","content-type","X-Requested-With","response","this","data","console","log","maxResults","eventIds","marketpage","eventpage","Backdrop_Backdrop","MainPanel_EventList","MainPanel_MarketList","height","react_spinners","loading","sizeUnit","size","color","components_Toolbar_Toolbar","SideDrawer_SideDrawer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2WAWeA,SARY,SAAAC,GAAK,OAC9BC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBC,QAASL,EAAMM,OAC/CL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BCQJG,SAXC,SAAAP,GAAK,OACnBC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAACK,EAAD,CAAoBF,MAAON,EAAMS,sBAEnCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eCKNM,SAZI,SAAAV,GAAK,OACtBC,EAAAC,EAAAC,cAAA,KACEQ,KAAK,UACLP,UAAU,OACVQ,QAASZ,EAAMa,MAAMD,QACrBE,IAAKd,EAAMe,EACXV,QAAS,kBAAML,EAAMgB,qBAAqBhB,EAAMa,MAAMD,WAErDZ,EAAMa,MAAMI,SCaFC,EApBI,SAAAlB,GACjB,IAAImB,EAAgB,+BAChBC,EAASpB,EAAMoB,OAInB,OAHIpB,EAAMqB,OACRF,EAAgB,qCAGhBlB,EAAAC,EAAAC,cAAA,OAAKC,UAAWe,EAAeG,MAAO,CAAEC,OAAQ,EAAGC,aAAc,IAC/DvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdgB,EAAOK,IAAI,SAACZ,EAAOE,GAAR,OACVd,EAAAC,EAAAC,cAACuB,EAAD,CACEb,MAAOA,EACPC,IAAKC,EACLC,qBAAsBhB,EAAMgB,2BCZvBW,SAFE,SAAA3B,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,QAASL,EAAMM,UCwBpDsB,EAzBO,SAAA5B,GACpB,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAU,OACVU,IAAKd,EAAMe,EACXV,QAAS,kBAAML,EAAM6B,0BAA0B7B,EAAM8B,MAAMC,MAE3D9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAS4B,aAAW,QAAQC,WAAUjC,EAAM8B,MAAMC,IAC9D/B,EAAM8B,MAAMI,MAEfjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZ,IAAI+B,KAAKC,eAAe,QAAS,CAChCC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,SAAU,qBACTC,OAAOC,KAAKC,MAAM9C,EAAM8B,MAAMiB,cCA1BC,EAlBG,SAAAhD,GAChB,IAAIiD,EAASjD,EAAMiD,OAEnB,OACEhD,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CAAEC,OAAQ,EAAGC,aAAc,IACrCvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACZ6C,EAAOxB,IAAI,SAACK,EAAOf,GAAR,OACVd,EAAAC,EAAAC,cAAC+C,EAAD,CACEpB,MAAOA,EACPhB,IAAKC,EACLc,0BAA2B7B,EAAM6B,yCCG9BsB,EAdQ,SAAAnD,GACrB,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAU,OACVU,IAAKd,EAAMe,EACXV,QAASL,EAAMoD,4BAEfnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAS4B,aAAW,UAChChC,EAAMqD,OAAOC,cCWPC,EAlBI,SAAAvD,GACjB,IAAIwD,EAAUxD,EAAMwD,QAEpB,OACEvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAckB,MAAO,CAAEC,OAAQ,EAAGC,aAAc,IAC7DvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACZoD,EAAQ/B,IAAI,SAAC4B,EAAQtC,GAAT,OACXd,EAAAC,EAAAC,cAACsD,EAAD,CACEJ,OAAQA,EACRvC,IAAKC,EACLc,0BAA2B7B,EAAMoD,kCCJzCM,EAAM,CAAE9C,QAAS,MAAOK,MAAO,OAC/B0C,EAAM,CAAE/C,QAAS,SAAUK,MAAO,OAClC2C,EAAS,CAAEhD,QAAS,EAAGK,MAAO,UAiKnB4C,6MAzGbC,MAAQ,CACNC,gBAAgB,EAChB3C,OAAQ,CAACsC,EAAKC,EAAKC,GACnBI,cAAeN,EACfO,UAAU,EACVC,iBAAiB,EACjBC,eAAe,EACflB,OAAQ,GACRO,QAAS,MAGXY,yBAA2B,WACzBC,EAAKC,SAAS,SAAAC,GACZ,MAAO,CAAER,gBAAiBQ,EAAUR,qBAIxCS,qBAAuB,WACrBH,EAAKC,SAAS,CAAEP,gBAAgB,OAGlC/C,qBAAuB,SAAAyD,GACrBJ,EAAKK,aAAaD,GAElB,IAAIT,EAAgBK,EAAKP,MAAM1C,OAAOuD,KAAK,SAAA7C,GACzC,OAAOA,EAAMlB,UAAY6D,IAG3BJ,EAAKC,SAAS,CACZN,cAAeA,EACfD,gBAAgB,EAChBI,eAAe,EACfD,iBAAiB,IAGnBG,EAAKC,SAAS,CAAEL,UAAU,OAG5BpC,0BAA4B,SAAA4C,GAC1BJ,EAAKO,cAAcH,GACnBJ,EAAKC,SAAS,CACZJ,iBAAiB,EACjBC,eAAe,EACfF,UAAU,OAIdb,2BAA6B,WAC3BiB,EAAKC,SAAS,CAAEJ,iBAAiB,yHArGhBW,yFACMC,IAAMC,KAG3B,2FACA,CACEC,OAAQ,CAAEC,aAAc,CAACJ,GAAcK,gBAAiB,CAAC,gBAE3D,CACEC,QAAS,CACPC,gBAAiB,mBACjBC,mBAAoB,+CACpBC,eAAgB,mBAChBC,mBAAoB,2BAZpBC,SAiBNC,KAAKnB,SAAS,CACZrB,OAAQuC,EAASE,KAAKjE,IAAI,SAAAwB,GAAM,OAAIA,EAAOnB,QAC3CmC,UAAU,EACVC,iBAAiB,EACjBC,eAAe,qLAICM,gFAClBkB,QAAQC,IAAInB,YACWK,IAAMC,KAE3B,oGACA,CACEc,WAAY,GACZb,OAAQ,CAAEc,SAAU,CAACrB,KAEvB,CACEU,QAAS,CACPC,gBAAiB,mBACjBC,mBAAoB,+CACpBC,eAAgB,mBAChBC,mBAAoB,2BAZpBC,SAiBNC,KAAKnB,SAAS,CACZd,QAASgC,EAASE,KAAKjE,IAAI,SAAA+B,GAAO,OAAIA,IACtCS,UAAU,EACVC,iBAAiB,EACjBC,eAAe,wIAwDjB,IAAIxC,EACAoE,EACAC,EAwBJ,OAtBIP,KAAK3B,MAAMC,gBAAkB0B,KAAK3B,MAAMG,YAC1CtC,EAAW1B,EAAAC,EAAAC,cAAC8F,EAAD,CAAU3F,MAAOmF,KAAKjB,wBAG/BiB,KAAK3B,MAAMK,gBACb6B,EACE/F,EAAAC,EAAAC,cAAC+F,EAAD,CACEjD,OAAQwC,KAAK3B,MAAMb,OACnBpB,0BAA2B4D,KAAK5D,6BAKlC4D,KAAK3B,MAAMI,kBACb6B,EACE9F,EAAAC,EAAAC,cAACgG,EAAD,CACE3C,QAASiC,KAAK3B,MAAMN,QACpBJ,2BAA4BqC,KAAKrC,8BAMrCnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMkB,MAAO,CAAE8E,OAAQ,SACpCnG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACkG,EAAA,aAAD,CACEC,QAASb,KAAK3B,MAAMG,SACpBsC,SAAU,KACVC,KAAM,GACNC,MAAO,aAGXxG,EAAAC,EAAAC,cAACuG,EAAD,CAASjG,mBAAoBgF,KAAKrB,2BAClCnE,EAAAC,EAAAC,cAACwG,EAAD,CACEvF,OAAQqE,KAAK3B,MAAM1C,OACnBC,KAAMoE,KAAK3B,MAAMC,eACjB/C,qBAAsByE,KAAKzE,uBAE5BW,EACD1B,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACG6F,EACAD,WAxJOa,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOlH,EAAAC,EAAAC,cAACiH,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9b1bcaff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./DrawerToggleButton.css\";\r\n\r\nconst drawerToggleButton = props => (\r\n  <button className=\"toggle-button\" onClick={props.click}>\r\n    <div className=\"toggle-button_line\" />\r\n    <div className=\"toggle-button_line\" />\r\n    <div className=\"toggle-button_line\" />\r\n  </button>\r\n);\r\n\r\nexport default drawerToggleButton;\r\n","import React from \"react\";\r\nimport DrawerToggleButton from \"../SideDrawer/DrawerToggleButton\";\r\nimport \"./Toolbar.css\";\r\n\r\nconst Toolbar = props => (\r\n  <header className=\"toolbar\">\r\n    <nav className=\"toolbar_navigation\">\r\n      <div className=\"toolbar-toggle_button\">\r\n        <DrawerToggleButton click={props.drawerClickHandler} />\r\n      </div>\r\n      <div className=\"spacer\" />\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default Toolbar;\r\n","import React from \"react\";\r\nimport \"./SideDrawer.css\";\r\n\r\nconst DrawerItem = props => (\r\n  <a\r\n    href=\"#header\"\r\n    className=\"item\"\r\n    api_key={props.sport.api_key}\r\n    key={props.i}\r\n    onClick={() => props.drawItemClickHandler(props.sport.api_key)}\r\n  >\r\n    {props.sport.title}\r\n  </a>\r\n);\r\n\r\nexport default DrawerItem;\r\n","import React from \"react\";\r\nimport \"./SideDrawer.css\";\r\nimport DrawerItem from \"./DrawerItem\";\r\n\r\nconst sideDrawer = props => {\r\n  let drawerClasses = \"side-drawer ui vertical menu\";\r\n  let sports = props.sports;\r\n  if (props.show) {\r\n    drawerClasses = \"side-drawer open ui vertical menu\";\r\n  }\r\n  return (\r\n    <div className={drawerClasses} style={{ margin: 0, borderRadius: 0 }}>\r\n      <div className=\"item\" />\r\n      {sports.map((sport, i) => (\r\n        <DrawerItem\r\n          sport={sport}\r\n          key={i}\r\n          drawItemClickHandler={props.drawItemClickHandler}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default sideDrawer;\r\n","import React from \"react\";\r\nimport \"./Backdrop.css\";\r\n\r\nconst backdrop = props => <div className=\"backdrop\" onClick={props.click} />;\r\n\r\nexport default backdrop;\r\n","import React from \"react\";\r\n\r\nconst EventListItem = props => {\r\n  return (\r\n    <div\r\n      className=\"item\"\r\n      key={props.i}\r\n      onClick={() => props.eventListItemClickHandler(props.event.id)}\r\n    >\r\n      <div className=\"header\" data-label=\"Event\" event-id={props.event.id}>\r\n        {props.event.name}\r\n      </div>\r\n      <div className=\"description\">\r\n        {new Intl.DateTimeFormat(\"en-GB\", {\r\n          year: \"numeric\",\r\n          month: \"numeric\",\r\n          day: \"numeric\",\r\n          hour: \"numeric\",\r\n          minute: \"numeric\",\r\n          second: \"numeric\",\r\n          timeZone: \"Australia/Sydney\"\r\n        }).format(Date.parse(props.event.openDate))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventListItem;\r\n","import React from \"react\";\r\nimport EventListItem from \"./EventListItem\";\r\n\r\nconst EventList = props => {\r\n  let events = props.events;\r\n\r\n  return (\r\n    <div style={{ margin: 0, borderRadius: 0 }}>\r\n      <div className=\"ui relaxed divided right aligned list\">\r\n        {events.map((event, i) => (\r\n          <EventListItem\r\n            event={event}\r\n            key={i}\r\n            eventListItemClickHandler={props.eventListItemClickHandler}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventList;\r\n","import React from \"react\";\r\n\r\nconst MarketListItem = props => {\r\n  return (\r\n    <div\r\n      className=\"item\"\r\n      key={props.i}\r\n      onClick={props.marketListItemClickHandler}\r\n    >\r\n      <div className=\"header\" data-label=\"Market\">\r\n        {props.market.marketName}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarketListItem;\r\n","import React from \"react\";\r\nimport MarketListItem from \"./MarketListItem\";\r\n\r\nconst MarketList = props => {\r\n  let markets = props.markets;\r\n\r\n  return (\r\n    <div className=\"market-list\" style={{ margin: 0, borderRadius: 0 }}>\r\n      <div className=\"ui relaxed divided right aligned list\">\r\n        {markets.map((market, i) => (\r\n          <MarketListItem\r\n            market={market}\r\n            key={i}\r\n            eventListItemClickHandler={props.marketListItemClickHandler}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarketList;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Toolbar from \"./components/Toolbar/Toolbar\";\nimport SideDrawer from \"./components/SideDrawer/SideDrawer\";\nimport Backdrop from \"./components/Backdrop/Backdrop\";\nimport EventList from \"./components/MainPanel/EventList\";\nimport { BounceLoader } from \"react-spinners\";\nimport MarketList from \"./components/MainPanel/MarketList\";\n\nvar afl = { api_key: 61420, title: \"AFL\" };\nvar mma = { api_key: 26420387, title: \"MMA\" };\nvar soccer = { api_key: 1, title: \"Soccer\" };\n\nclass App extends Component {\n  async getEventList(eventTypeId) {\n    const response = await axios.post(\n      //REMEMBER TO RUN C:/cors-anywhere-master/ node server CMD before testing\n\n      \"http://220.253.88.23:8080/https://api.betfair.com/exchange/betting/rest/v1.0/listEvents/\",\n      {\n        filter: { eventTypeIds: [eventTypeId], marketTypeCodes: [\"MATCH_ODDS\"] }\n      },\n      {\n        headers: {\n          \"X-Application\": \"srvsmqIdO5bzDv92\",\n          \"X-Authentication\": \"doBpj027XoDXqH+x0KKMrXQNWEB5rGXURFmor6hXPAc=\",\n          \"content-type\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\"\n        }\n      }\n    );\n\n    this.setState({\n      events: response.data.map(events => events.event),\n      showload: false,\n      showmarketpages: false,\n      showeventpage: true\n    });\n  }\n\n  async getMarketList(eventId) {\n    console.log(eventId);\n    const response = await axios.post(\n      //REMEMBER TO RUN C:/cors-anywhere-master/ node server CMD before testing\n      \"http://220.253.88.23:8080/https://api.betfair.com/exchange/betting/rest/v1.0/listMarketCatalogue/\",\n      {\n        maxResults: 30,\n        filter: { eventIds: [eventId] }\n      },\n      {\n        headers: {\n          \"X-Application\": \"srvsmqIdO5bzDv92\",\n          \"X-Authentication\": \"doBpj027XoDXqH+x0KKMrXQNWEB5rGXURFmor6hXPAc=\",\n          \"content-type\": \"application/json\",\n          \"X-Requested-With\": \"XMLHttpRequest\"\n        }\n      }\n    );\n\n    this.setState({\n      markets: response.data.map(markets => markets),\n      showload: false,\n      showmarketpages: true,\n      showeventpage: false\n    });\n  }\n\n  state = {\n    sideDrawerOpen: false,\n    sports: [afl, mma, soccer],\n    selectedSport: afl,\n    showload: false,\n    showmarketpages: false,\n    showeventpage: true,\n    events: [],\n    markets: []\n  };\n\n  drawerToggleClickHandler = () => {\n    this.setState(prevState => {\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({ sideDrawerOpen: false });\n  };\n\n  drawItemClickHandler = eventId => {\n    this.getEventList(eventId);\n\n    let selectedSport = this.state.sports.find(event => {\n      return event.api_key === eventId;\n    });\n\n    this.setState({\n      selectedSport: selectedSport,\n      sideDrawerOpen: false,\n      showeventpage: false,\n      showmarketpages: false\n    });\n\n    this.setState({ showload: true });\n  };\n\n  eventListItemClickHandler = eventId => {\n    this.getMarketList(eventId);\n    this.setState({\n      showmarketpages: true,\n      showeventpage: false,\n      showload: true\n    });\n  };\n\n  marketListItemClickHandler = () => {\n    this.setState({ showmarketpages: false });\n  };\n\n  render() {\n    let backdrop;\n    let marketpage;\n    let eventpage;\n\n    if (this.state.sideDrawerOpen || this.state.showload) {\n      backdrop = <Backdrop click={this.backdropClickHandler} />;\n    }\n\n    if (this.state.showeventpage) {\n      eventpage = (\n        <EventList\n          events={this.state.events}\n          eventListItemClickHandler={this.eventListItemClickHandler}\n        />\n      );\n    }\n\n    if (this.state.showmarketpages) {\n      marketpage = (\n        <MarketList\n          markets={this.state.markets}\n          marketListItemClickHandler={this.marketListItemClickHandler}\n        />\n      );\n    }\n\n    return (\n      <div className=\"App\" style={{ height: \"100%\" }}>\n        <div className=\"sweet-loading\">\n          <BounceLoader\n            loading={this.state.showload}\n            sizeUnit={\"px\"}\n            size={60}\n            color={\"#521751\"}\n          />\n        </div>\n        <Toolbar drawerClickHandler={this.drawerToggleClickHandler} />\n        <SideDrawer\n          sports={this.state.sports}\n          show={this.state.sideDrawerOpen}\n          drawItemClickHandler={this.drawItemClickHandler}\n        />\n        {backdrop}\n        <div />\n        <main>\n          {eventpage}\n          {marketpage}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}